names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

def damages_convert(damages):
    update = []
    for i in damages:
        if i == 'Damages not recorded':
            update.append(i)
        elif 'M' in i:
            update.append(float(i[0:-1])*1000000)
        elif 'B' in i:
            update.append(float(i[0:-1])*1000000000)
    return update

damages_update = damages_convert(damages)

hurricanes_by_name = {}

for i in range(len(names)):
    hurricanes_by_name.update({names[i]: {'Name': names[i], 'Month': months[i], 'Year': years[i], 'Max Sustained Wind': max_sustained_winds[i], 'Area Affected': areas_affected[i], 'Damage': damages_update[i]}})

hurricanes_by_years = {}

for i in range(len(years)):
    hurricanes_by_years.update({years[i]: {'Name': names[i], 'Month': months[i], 'Year': years[i], 'Max Sustained Wind': max_sustained_winds[i], 'Area Affected': areas_affected[i], 'Damage': damages_update[i]}})

occurences = {}

def repetitions_by_region(areas):
    for i in areas:
        for j in i:
            if j in occurences:
                occurences[j] += 1
            else:
                occurences[j] = 1

repetitions_by_region(areas_affected)

print(occurences)

def most_hit(occurences):
    max_area = ''
    max_area_count = 0
    for i in occurences:
        if occurences.get(i) > max_area_count:
            max_area = i
            max_area_count = occurences.get(i)
    return  max_area, max_area_count

print(most_hit(occurences))

mortality_scale = {0: 0, 1: 100, 2: 500, 3: 1000, 4: 10000}

mortality_scale_cities = {0 : [], 1: [], 2: [], 3: [], 4: [], 5: []}

def mortality(deaths, scale):
    for i in range(len(deaths)):
        if deaths[i] == scale[0]:
            mortality_scale_cities[0].append(names[i])
        elif deaths[i] < scale[1]:
            mortality_scale_cities[1].append(names[i])
        elif deaths[i] < scale[2]:
            mortality_scale_cities[2].append(names[i])
        elif deaths[i] < scale[3]:
            mortality_scale_cities[3].append(names[i])
        elif deaths[i] < scale[4]:
            mortality_scale_cities[4].append(names[i])
        elif deaths[i] > scale[4]:
            mortality_scale_cities[5].append(names[i])

mortality(deaths, mortality_scale)

print(mortality_scale_cities)

def most_damages(damages, hurricane):
    hurricane_damage = {name:damage for name, damage in zip(hurricane, damages)}
    max_damages = 0
    max_damages_hurricane = ''
    for i in hurricane_damage:
        if hurricane_damage[i] != 'Damages not recorded':
            if hurricane_damage[i] > max_damages:
                max_damages = hurricane_damage[i]
                max_damages_hurricane = i
    return max_damages_hurricane, max_damages

print(most_damages(damages_update, names))

Damages_scale_cities = {0 : [], 1: [], 2: [], 3: [], 4: [], 5: []}

Damages_scale = {0: 0, 1: 100000000, 2: 1000000000, 3: 10000000000, 4: 50000000000}

def damages_rate(damages, scale):
    for i in range(len(damages)):
        if damages[i] == 'Damages not recorded':
            Damages_scale_cities[0].append(names[i])
        elif damages[i] == scale[0]:
            Damages_scale_cities[0].append(names[i])
        elif damages[i] < scale[1]:
            Damages_scale_cities[1].append(names[i])
        elif damages[i] < scale[2]:
            Damages_scale_cities[2].append(names[i])
        elif damages[i] < scale[3]:
            Damages_scale_cities[3].append(names[i])
        elif damages[i] < scale[4]:
            Damages_scale_cities[4].append(names[i])
        elif damages[i] > scale[4]:
            Damages_scale_cities[5].append(names[i])

damages_rate(damages_update, Damages_scale)

print(Damages_scale_cities)

